// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

export class Key extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'libp2p:index:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    /**
     * Peer ID
     */
    public /*out*/ readonly peerId!: pulumi.Output<string>;
    /**
     * Marshalled private key
     */
    public /*out*/ readonly private!: pulumi.Output<string>;
    /**
     * Marshalled public key
     */
    public /*out*/ readonly public!: pulumi.Output<string>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bits"] = args ? args.bits : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["peerId"] = undefined /*out*/;
            resourceInputs["private"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
        } else {
            resourceInputs["peerId"] = undefined /*out*/;
            resourceInputs["private"] = undefined /*out*/;
            resourceInputs["public"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["private"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Key.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    /**
     * Siye of the key (Only for RSA key)
     */
    bits?: pulumi.Input<number>;
    /**
     * Type of the key to generate one of RSA, ED25519, SECP256K1, ECDSA
     */
    type: pulumi.Input<enums.KeyType>;
}
